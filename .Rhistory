"&resultType=json",
"&srh_placeCode=9",
"&pSize=100",
"&cPage=1")
t <- fromJSON(api_url)
View(t)
api_url <- paste0("http://iq.ifac.or.kr/openAPI/real/search.php?",
"svID=facility",
"&apiKey=",service_key,
"&resultType=json",
"&srh_placeCode=9",
"&pSize=50",
"&cPage=1")
t <- fromJSON(api_url)
View(t)
api_url <- paste0("http://iq.ifac.or.kr/openAPI/real/search.php?",
"svID=facility",
"&apiKey=",service_key,
"&resultType=json",
"&srh_placeCode=9",
"&pSize=200",
"&cPage=1")
t <- fromJSON(api_url)
api_url <- paste0("http://iq.ifac.or.kr/openAPI/real/search.php?",
"svID=facility",
"&apiKey=",service_key,
"&resultType=json",
"&srh_placeCode=9",
"&pSize=200",
"&cPage=2")
t <- fromJSON(api_url)
View(t)
api_url <- paste0("http://iq.ifac.or.kr/openAPI/real/search.php?",
"svID=facility",
"&apiKey=",service_key,
"&resultType=json",
"&srh_placeCode=9",
"&pSize=200",
"&cPage=3")
t <- fromJSON(api_url)
api_url <- paste0("http://iq.ifac.or.kr/openAPI/real/search.php?",
"svID=facility",
"&apiKey=",service_key,
"&resultType=json",
"&srh_placeCode=9",
"&pSize=200",
"&cPage=1")
t <- fromJSON(api_url)
api_url <- paste0("http://iq.ifac.or.kr/openAPI/real/search.php?",
"svID=facility",
"&apiKey=",service_key,
"&resultType=json",
"&srh_placeCode=9",
"&pSize=100",
"&cPage=1")
t <- fromJSON(api_url)
tb_api_facility <- t[-1,c(4,5,7,8,10,11)]
View(tb_api_facility)
names(tb_api_facility)
library(RPostgreSQL)
## DB 연결
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "ich_sg",
port = "5432",
host = "192.168.1.169",
user = "postgres",
password = "socsoft")
### DB에 데이터 넣기
dbClearResult(dbSendQuery(con,enc2utf8("drop table if exists tb_api_facility;")))
### DB에 데이터 넣기
dbClearResult(dbSendQuery(con,enc2utf8("drop table if exists tb_api_facility;")))
dbClearResult(dbSendQuery(con,enc2utf8("create table tb_api_facility (
idx  integer primary key,
title varchar(255),
gubun varchar(255),
cat varchar(255),
address varchar(255),
newaddress varchar(255)
);")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON TABLE tb_api_facility IS '문화시설';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_facility.idx IS '숫자';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_facility.title IS '제목';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_facility.gubun IS '구분';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_facility.cat IS '구분상세';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_facility.address IS '주소';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_facility.newaddress IS '새주소';")))
dbWriteTable(conn = con,
name = "tb_api_facility",
value = tb_api_facility,
append = T, row.names = F)
library(xml2)
library(dplyr)
library(data.table)
library(XML)
library(jsonlite)
library(httr)
day <- read.csv("X:/2020년 프로젝트/06.인천광역시_서구/Script/remove/date.csv", stringsAsFactors = F)
## 서비스 생성
service_key <- "514vqhYM8eQBtTU6WpRnGDAbJZlHdE"
## api요청 URL생성
for (i in 1:12) {
tmp <- paste0("http://iq.ifac.or.kr/openAPI/real/search.php?",
"apiKey=",service_key,
"&svID=culture",
"&resultType=json",
"&srh_periodType=p",
"&srh_placeCode=9",
"&srh_sDate=",day[i,1],
"&srh_eDate=",day[i,2],
"&pSize=100",
"&cPage=1")
assign(paste0("api_url_",i),tmp)
}
url_list <- ls(pattern = "api_url_")
result_list <- list()
##데이터 요청추출
for (i in 1:length(url_list)) {
t <- jsonlite::stream_in(file(get(paste0("api_url_",i))), verbose = F)
t <- t[-1,c(5,7:14)]
result_list[[i]] <- t
}
View(tb_api_facility)
result <- unique(rbindlist(result_list))
tb_api_culture <- result[place_sido == "인천광역시",]
View(result)
View(tb_api_culture)
View(tb_api_facility)
tb_api_culture <- result[place_sido == "인천광역시",]
for (i in 1:nrow(tb_api_culture)) {
tb_api_culture$no[i] <- i
}
tb_api_culture <- tb_api_culture[,c(10,1:9)]
names(tb_api_culture)
library(RPostgreSQL)
## DB 연결
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "ich_sg",
port = "5432",
host = "192.168.1.169",
user = "postgres",
password = "socsoft")
### DB에 데이터 넣기
dbClearResult(dbSendQuery(con,enc2utf8("drop table if exists tb_api_culture;")))
dbClearResult(dbSendQuery(con,enc2utf8("create table tb_api_culture (
no  integer primary key,
title varchar(255),
category varchar(255),
sdate varchar(255),
edate varchar(255),
place varchar(255),
place_sido varchar(255),
place_gugun varchar(255),
management varchar(255),
fee_case varchar(255));")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON TABLE tb_api_culture IS '문화행사';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_culture.no IS '숫자';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_culture.title IS '제목';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_culture.category IS '카레고리';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_culture.sdate IS '행사시작날짜';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_culture.edate IS '행사끝날짜';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_culture.place IS '장소';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_culture.place_sido IS '장소_시도';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_culture.place_gugun IS '장소_구군';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_culture.management IS '관리주체';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_culture.fee_case IS '요금';")))
dbWriteTable(conn = con,
name = "tb_api_culture",
value = tb_api_culture,
append = T, row.names = F)
library(xml2)
library(dplyr)
library(data.table)
library(XML)
library(jsonlite)
library(httr)
#day <- read.csv("X:/2020년 프로젝트/06.인천광역시_서구/Script/remove/date.csv", stringsAsFactors = F)
## 서비스 생성
service_key <- "yDzHY6WbAJvwEX4puShNVLk9F81MP7"
#day <- read.csv("X:/2020년 프로젝트/06.인천광역시_서구/Script/remove/date.csv", stringsAsFactors = F)
## 서비스 생성
service_key <- "zAu28qBXKjgh67yZwc9GULe5bsfnWN"
api_url <- paste0("http://iq.ifac.or.kr/openAPI/real/search.php?",
"svID=facility",
"&apiKey=",service_key,
"&resultType=json",
"&srh_placeCode=9",
"&pSize=100",
"&cPage=1")
t <- fromJSON(api_url)
View(t)
api_url <- paste0("http://iq.ifac.or.kr/openAPI/real/search.php?",
"svID=treasure",
"&apiKey=",service_key,
"&resultType=json",
"&srh_placeCode=9",
"&pSize=100",
"&cPage=1")
t <- fromJSON(api_url)
#day <- read.csv("X:/2020년 프로젝트/06.인천광역시_서구/Script/remove/date.csv", stringsAsFactors = F)
## 서비스 생성
service_key <- "zAu28qBXKjgh67yZwc9GULe5bsfnWN"
api_url <- paste0("http://iq.ifac.or.kr/openAPI/real/search.php?",
"svID=treasure",
"&apiKey=",service_key,
"&resultType=json",
"&srh_placeCode=9",
"&pSize=100",
"&cPage=1")
t <- fromJSON(api_url)
t
api_url <- paste0("http://iq.ifac.or.kr/openAPI/real/search.php?",
"svID=treasure",
"&apiKey=",service_key,
"&resultType=json",
"&srh_placeCode=g6",
"&pSize=100",
"&cPage=1")
t <- fromJSON(api_url)
View(t)
api_url <- paste0("http://iq.ifac.or.kr/openAPI/real/search.php?",
"svID=treasure",
"&apiKey=",service_key,
"&resultType=json",
"&srh_placeCode=g6",
"&pSize=50",
"&cPage=1")
t <- fromJSON(api_url)
api_url <- paste0("http://iq.ifac.or.kr/openAPI/real/search.php?",
"svID=treasure",
"&apiKey=",service_key,
"&resultType=json",
"&srh_placeCode=g6",
"&pSize=10",
"&cPage=1")
t <- fromJSON(api_url)
api_url <- paste0("http://iq.ifac.or.kr/openAPI/real/search.php?",
"svID=treasure",
"&apiKey=",service_key,
"&resultType=json",
"&srh_placeCode=g6",
"&pSize=100",
"&cPage=1")
t <- fromJSON(api_url)
tb_api_facility <- t[-1,c(4,5,7,8,10,11)]
View(tb_api_facility)
t <- fromJSON(api_url)
View(t)
tb_api_assets <- t[-1,c(4,5,7,8,9,13)]
View(tb_api_assets)
library(RPostgreSQL)
## DB 연결
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "ich_sg",
port = "5432",
host = "192.168.1.169",
user = "postgres",
password = "socsoft")
### DB에 데이터 넣기
dbClearResult(dbSendQuery(con,enc2utf8("drop table if exists tb_api_assets;")))
names(tb_api_assets)
### DB에 데이터 넣기
dbClearResult(dbSendQuery(con,enc2utf8("drop table if exists tb_api_assets;")))
dbClearResult(dbSendQuery(con,enc2utf8("create table tb_api_assets (
idx  integer primary key,
title varchar(255),
region varchar(255),
gubun varchar(255),
number varchar(255),
location varchar(255)
);")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON TABLE tb_api_assets IS '문화재';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_assets.idx IS '숫자';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_assets.title IS '제목';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_assets.region IS '지역';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_assets.gubun IS '구분';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_assets.number IS '문화재번호';")))
dbClearResult(dbSendQuery(con,enc2utf8("COMMENT ON COLUMN tb_api_assets.location IS '위치';")))
dbWriteTable(conn = con,
name = "tb_api_assets",
value = tb_api_assets,
append = T, row.names = F)
#day <- read.csv("X:/2020년 프로젝트/06.인천광역시_서구/Script/remove/date.csv", stringsAsFactors = F)
## 서비스 생성
service_key <- "mydtfzQLk95EUMFsnpcBTJhWbSAvZK"
api_url <- paste0("http://iq.ifac.or.kr/openAPI/real/search.php?",
"svID=festival",
"&apiKey=",service_key,
"&resultType=json",
"&pSize=100",
"&cPage=1")
t <- fromJSON(api_url)
View(t)
t <- filter(t, organ %like% "서구" | organ %like% "매립")
View(t)
api_url <- paste0("http://iq.ifac.or.kr/openAPI/real/search.php?",
"svID=festival",
"&apiKey=",service_key,
"&resultType=json",
"&pSize=50",
"&cPage=1")
t <- fromJSON(api_url)
View(t)
t <- filter(t, organ %like% "서구" | organ %like% "매립")
api_url <- paste0("http://iq.ifac.or.kr/openAPI/real/search.php?",
"svID=festival",
"&apiKey=",service_key,
"&resultType=json",
"&pSize=200",
"&cPage=1")
t <- fromJSON(api_url)
t <- filter(t, organ %like% "서구" | organ %like% "매립")
View(t)
## 패키지 불러오기
setwd("X:/2020년 프로젝트/06.인천광역시_서구/Script/kim_script")
source("01_load_package.R", encoding = "UTF-8")
readxl::excel_sheets("X:/2020년 프로젝트/06.인천광역시_서구/Data/문화재단_라운드테이블/3회차 라운드테이블 자료.xlsx")
## 데이터 불러오기
excel_list <- list()
for (i in 1:6) {
temp <- read_excel("X:/2020년 프로젝트/06.인천광역시_서구/Data/문화재단_라운드테이블/3회차 라운드테이블 자료.xlsx", sheet = i)
excel_list[[i]] <- temp[,1:3]
}
## 검암경서 청라, 가정석남, 검단, 가좌
df_gg <- excel_list[[1]]; df_chr <- excel_list[[2]]; df_gs <- excel_list[[3]]; df_gd <- excel_list[[4]]; df_gj_ch <- excel_list[[5]]; df_gj <- excel_list[[6]]
df_gg$지역 <- "검암경서"; df_chr$지역 <- "청라"; df_gs$지역 <- "가정석남"; df_gd$지역 <- "검단"; df_gj_ch$지역 <- "가좌청소년"; df_gj$지역 <- "가좌"
df_tot <- rbind(df_gg, df_chr, df_gs, df_gd, df_gj_ch, df_gj)
df_tot$발언자 <- ifelse(df_tot$발언자 %like% "재단", df_tot$발언자, "시민")
## 시민들의 의견을 찾기위한 시민의견 데이터 추출
df_tot_mind <- filter(df_tot, 발언자 == "시민")
names(df_tot_mind)
colnames(df_tot_mind) <- c("no","speak","contents","region")
## builddictionary
buildDictionary(ext_dic = c("woorimalsam","sejong","insighter"),
#category_dic_nms = "",
user_dic = data.frame(term = readLines("Noun.txt"), tag = "ncn"),
replace_usr_dic = T
#verbose = F
)
## 데이터 정제
source("processing.R", encoding = "UTF-8")
df_tot_mind$contents <- rtable_stemming(text = df_tot_mind$contents, pattern = pattern_list, replacement = replacement_list)
df_tot_mind$contents <- rtable_stopword(text = df_tot_mind$contents, stopword = stopwords_list)
df_tot_mind$contents <- stemming_words(df_tot_mind$contents)
#df <- filter(df_tot_mind, 지역 == "검암경서")
df <- df_tot_mind
# NC 보통명사
noun <- sapply(df$contents, extractNoun, USE.NAMES = FALSE)
tmp_noun <- lapply(noun, function(x) x[nchar(x)>1])
tmp_noun <- sapply(tmp_noun, paste, collapse = " ")
corp <- Corpus(VectorSource(tmp_noun))
#inspect(corp)
tdm <- TermDocumentMatrix(corp)
word.count = as.array(rollup(tdm,2))   #매트릭스 행별 합계구하기
word.order = order(word.count, decreasing = T)[1:30] #많이 쓰인 단어 순서정리(단어번호)
freq.word = word.order[1:30]  #상위 1000개 단어만 재할당(단어번호)
row.names(tdm[freq.word,])      #해당단어번호 단어 확인
## DTM으로 변환
dtm = as.DocumentTermMatrix(tdm[freq.word,])
## 단어 frequency
freq <- data.frame(word.count)
freq$name <- row.names(freq)
freq <- freq %>% select(name, X1) %>% arrange(desc(X1))
#display.brewer.pal(n = 8, name = 'Set2')
pal <- brewer.pal(n = 8, name = 'Set2')
# Wordcloud를 그립니다.
wordcloud2(
data = freq[1:30,],
size = 1,
fontFamily = 'NanumGothic',
color = pal,
backgroundColor = 'white',
minRotation = -pi / 4,
maxRotation = pi / 4,
shuffle = TRUE,
rotateRatio = 0.25,
shape = 'circle',
ellipticity = 0.6)
## 워드 클라우드
imagedir <- paste("X:/2020년 프로젝트/06.인천광역시_서구/Script/result/라운드테이블3/", substr(Sys.Date(), 1, 4), sep="")
imagedir <- paste(imagedir, substr(Sys.Date(), 6, 7), sep="_")
imagedir <- paste(imagedir, substr(Sys.Date(), 9, 10), sep="_")
imagedir <- paste(imagedir, "wordcloud", sep="_")
imagedir <- paste(imagedir, "종합", sep="_")
imagename <- paste(imagedir, ".jpg", sep="")
dtmSub <- dtm[rownames(x = dtm), ]
# 모든 값이 0인 열을 삭제합니다.
dtmSub <- dtmSub[, as.matrix(x = dtmSub) %>% colSums() >= 1]
# 상관계수 행렬의 크기를 조정합니다.
corTerms <- dtmSub %>% as.matrix() %>% cor()
corTerms[corTerms <= 0.3] <- 0
# 네트워크 객체를 생성합니다.
netTerms <- network(x = corTerms, directed = FALSE)
# 매개 중심성을 계산합니다.
btnTerms <- sna::betweenness(dat = netTerms)
netTerms %v% 'mode' <-
ifelse(
test = btnTerms >= quantile(x = btnTerms, probs = 0.1, na.rm = TRUE),
yes = 'Top',
no = 'Rest')
# 엣지 크기를 지정합니다. 이번 예제에서는 상관계수의 1.2배로 합니다.
set.edge.value(x = netTerms, attrname = 'edgeSize', value = corTerms * 2)
ggnet2(net = netTerms,
layout.par = list(cell.jitter = 0.001),
#label = TRUE,
#label.size = 4,
#shape.legend = NA,
#color = "phono",
palette = "Set3",
#node.size = sna::degree(dat = netTerms),
edge.color = "grey50",
edge.size = 'edgeSize')+
geom_point(aes(color = color), size = 12, color = "white") +
geom_point(aes(color = color), size = 12, alpha = 0.5) +
geom_point(aes(color = color), size = 9) +
geom_text(aes(label =label), color = "black", fontface = "bold", size = 5) +
guides(color = FALSE)
## 패키지 불러오기
setwd("X:/2020년 프로젝트/06.인천광역시_서구/Script/kim_script")
source("01_load_package.R", encoding = "UTF-8")
readxl::excel_sheets("X:/2020년 프로젝트/06.인천광역시_서구/Data/문화재단_라운드테이블/2회차 라운드테이블 자료.xlsx")
## 데이터 불러오기
excel_list <- list()
for (i in 1:5) {
temp <- read_excel("X:/2020년 프로젝트/06.인천광역시_서구/Data/문화재단_라운드테이블/2회차 라운드테이블 자료.xlsx", sheet = i)
excel_list[[i]] <- temp[,1:3]
}
## 검암경서 청라, 가정석남, 검단, 가좌
df_gg <- excel_list[[1]]; df_chr <- excel_list[[2]]; df_gs <- excel_list[[3]]; df_gd <- excel_list[[4]]; df_gj <- excel_list[[5]]
df_gg$지역 <- "검암경서"; df_chr$지역 <- "청라"; df_gs$지역 <- "가정석남"; df_gd$지역 <- "검단"; df_gj$지역 <- "가좌"
df_tot <- rbind(df_gg, df_chr, df_gs, df_gd, df_gj)
df_tot$발언자 <- ifelse(df_tot$발언자 %like% "재단", df_tot$발언자, "시민")
## 시민들의 의견을 찾기위한 시민의견 데이터 추출
df_tot_mind <- filter(df_tot, 발언자 == "시민")
df_tot_mind %>% group_by(지역) %>% count()
df_tot_mind %>% group_by("지역") %>% count()
df_tot_mind %>% select("지역") %>% group_by("지역") %>% count()
#####################################################################################################
# Script id   : 02 Frequency.R
# Script Name : 패키지 로드
# Author      : 김상훈
# Date        : 2020.04.26
#####################################################################################################
## 패키지 로드
#####################################################################################################
setwd("x:/2020년 프로젝트/06.인천광역시_서구/Script/kim_script/")
source("01_load_package.R", encoding = "UTF-8")
dir_list <- dir(pattern = "trans_")
df_list <- list()
for (i in 1:length(dir_list)) {
df <- read.csv(dir_list[i], stringsAsFactors = F)
df$month <- gsub(".csv","",str_split_fixed(dir_list[i], "_", n = 2)[,2])
df_list[[i]] <- df
}
dir_list <- dir(pattern = "trans_")
dir_list <- dir(pattern = "trans_")
setwd("X:/2020년 프로젝트/06.인천광역시_서구/Data/문화재단_보도자료/문화재단_보도자료요청_excel")
dir_list <- dir(pattern = "trans_")
df_list <- list()
for (i in 1:length(dir_list)) {
df <- read.csv(dir_list[i], stringsAsFactors = F)
df$month <- gsub(".csv","",str_split_fixed(dir_list[i], "_", n = 2)[,2])
df_list[[i]] <- df
}
df_news <- rbindlist(df_list)
setwd("x:/2020년 프로젝트/06.인천광역시_서구/Script/kim_script/")
source('processing.R', encoding = "UTF-8")
## builddictionary
buildDictionary(ext_dic = c("woorimalsam","sejong","insighter"),
#category_dic_nms = "",
user_dic = data.frame(term = readLines("Noun.txt"), tag = "ncn")
#replace_usr_dic = F,
#verbose = F
)
## 오래걸린다 원본 보존
df <- df_news
## 절깎
df$contents <- stemming_words2(text = df$contents, pattern = pattern_list, replacement = replacement_list)
df$contents <- remove_stopwords2(text = df$contents, stopword = stopwords_list)
df$contents <- stemming_words(df$contents)
df <- filter(df, nchar(contents) > 0)
# NC 보통명사
noun <- sapply(df$contents, extractNoun, USE.NAMES = FALSE)
tmp_noun <- lapply(noun, function(x) x[nchar(x)>2])
tmp_noun <- sapply(tmp_noun, paste, collapse = " ")
corp <- Corpus(VectorSource(tmp_noun))
#inspect(corp)
tdm <- TermDocumentMatrix(corp)
word.count = as.array(rollup(tdm,2))   #매트릭스 행별 합계구하기
word.order = order(word.count, decreasing = T)[1:100] #많이 쓰인 단어 순서정리(단어번호)
freq.word = word.order[1:100]  #상위 1000개 단어만 재할당(단어번호)
row.names(tdm[freq.word,])      #해당단어번호 단어 확인
## DTM으로 변환
dtm = as.DocumentTermMatrix(tdm[freq.word,])
## 단어 frequency
freq <- data.frame(word.count)
freq$name <- row.names(freq)
freq <- freq %>% select(name, X1) %>% arrange(desc(X1))
display.brewer.pal(n = 8, name = 'Set2')
pal <- brewer.pal(n = 8, name = 'Set2')
# Wordcloud를 그립니다.
wordcloud2(
data = freq[1:30,],
size = 1,
fontFamily = 'NanumGothic',
color = pal,
backgroundColor = 'white',
minRotation = -pi / 4,
maxRotation = pi / 4,
shuffle = TRUE,
rotateRatio = 0.25,
shape = 'circle',
ellipticity = 0.6)
